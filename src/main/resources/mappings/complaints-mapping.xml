<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ComplaintsDAO">
	<!-- 민원 현황에서 직접 등록 -->
	<insert id="insertComplaints">
		INSERT INTO complaints(com_seq, con_num, name, title, content, address, user_id)
		VALUES (com_seq.NEXTVAL, #{con_num}, #{name}, #{title}, #{content}, #{address}, #{user_id})
	</insert> 
	 
	<!-- 공사 현황에서 등록 -->
	<insert id="insertComplaintsFromCon">
		INSERT INTO complaints(com_seq, con_seq, con_name, con_num, name, title, content, address)
		VELUES (com_seq.NEXTVAL, #{con_seq}, ${con_name}, #{con_num}, #{name}, #{title}, #{content}, #{address})
	</insert>
	 
	<!-- 민원 수정 -->
	<update id="updateComplaints">
		UPDATE complaints SET title = #{title}, content = #{content}, con_num = #{con_num}, address = #{address}, moddate = SYSDATE
		 WHERE com_seq = #{com_seq}
	</update>
	
	<!-- 민원 삭제 -->
	<delete id="deleteComplaints">
		DELETE complaints WHERE com_seq = #{com_seq}
	</delete>
	
	<!-- 답변 등록 -->
	<update id="answerComplaints">
		UPDATE complaints SET answer = #{answer}
		 WHERE com_seq = #{com_seq}
	</update>
	 
	<!-- 민원 리스트 -->
	<select id="getComplaintsList" resultType="complaint">
		SELECT * FROM complaints
	</select>
	
	<!-- 민원 상세 보기 -->
	<select id="getComplaints" resultType="complaint">
		SELECT * FROM complaints WHERE com_seq = #{com_seq}
	</select>
	
	<!-- 메인 페이지에서 최신 5개의 민원 전시-->
	<select id="mainComplaintList" resultType="complaint">
		<![CDATA[
		SELECT com_seq, title, regdate
		FROM
    		(SELECT ROW_NUMBER() OVER(ORDER BY regdate DESC) rn, com_seq, title, regdate
     		 FROM complaints)    
		WHERE rn > 0 AND rn <=5
		]]>
	</select>
	
	<!-- 관리자 페이지에서 최신 5개의 민원 전시-->
	<select id="managerMainCompList" parameterType="String" resultType="complaint">
		<![CDATA[
		SELECT com_seq, title, regdate
		FROM
    		(SELECT ROW_NUMBER() OVER(ORDER BY regdate DESC) rn, com_seq, title, regdate
     		 FROM complaints
     		 WHERE address LIKE '%'||#{address}||'%')    
		WHERE rn > 0 AND rn <=5
		]]>
	</select>
	
	<!-- 민원 페이징 처리 -->
	<select id="compListWithPaging" parameterType="HashMap" resultType="complaint">
		<![CDATA[
		SELECT com_seq, con_seq, con_name, con_num, title, name, content, 
			   answer, view_count, regdate, moddate, address, user_id
		  FROM
    		(SELECT row_number() over(ORDER BY regdate desc) rn, com_seq, con_seq, con_name, con_num, 
    				title, name, content, answer, view_count, regdate, moddate, address, user_id
           	   FROM complaints
     	   	  WHERE title LIKE '%'||#{key}||'%' AND con_num LIKE '%'||#{con_num}||'%')
		 WHERE rn > (#{criteria.pageNum}-1) * #{criteria.rowsPerPage}
		   AND rn <= #{criteria.pageNum} * #{criteria.rowsPerPage}
		]]>
	</select>
	
	<!-- 관리자 민원 페이징 처리 -->
	<select id="managerCompList" parameterType="HashMap" resultType="complaint">
		<![CDATA[
		SELECT com_seq, con_seq, con_name, con_num, title, name, content, 
			   answer, view_count, regdate, moddate, address, user_id
		  FROM
    		(SELECT row_number() over(ORDER BY regdate desc) rn, com_seq, con_seq, con_name, con_num, 
    				title, name, content, answer, view_count, regdate, moddate, address, user_id
           	   FROM complaints
     	   	  WHERE address LIKE '%'||#{address}||'%' AND title LIKE '%'||#{key}||'%' AND con_num LIKE '%'||#{con_num}||'%')
		 WHERE rn > (#{criteria.pageNum}-1) * #{criteria.rowsPerPage}
		   AND rn <= #{criteria.pageNum} * #{criteria.rowsPerPage}
		]]>
	</select>
	
	<!-- 전체 민원 갯수 구하기 -->
	<select id="getCompCount" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM complaints WHERE title LIKE '%'||#{key}||'%'
	</select>
	
	<!-- 조회수 업데이트 -->
	<update id="updateCompView" parameterType="complaint">
		UPDATE complaints SET view_count = #{view_count} WHERE com_seq=#{com_seq}
	</update>	
</mapper>